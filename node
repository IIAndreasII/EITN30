#!/bin/python3
import sys
import time

from pyrf24 import RF24, RF24_PA_LOW, RF24_1MBPS
from tuntap import TunTap

import multiprocessing as mp

from common import *

running = True

rx = None
tx = None

rx_address = ''
tx_address = ''

rx_channel = -1
tx_channel = -1

is_base = False

NODE1 = [b'1Node']
NODE2 = [b'2Node']

BASE_IP   = '11.11.11.2'
CLIENT_IP = '11.11.11.3'

MASK = '255.255.255.0'

tun = None


def recv(recv_q):
    while running:
        has_p, _ = rx.available_pipe()
        if has_p:
            p = rx.read(rx.getDynamicPayloadSize())
            recv_q.put(bytes(p))
            pr_dbg("received packet on radio")
        else:
            pass
            time.sleep(0.003)


def send(send_q):
    while running:
        rp = send_q.get()
        for p in rp:
            tx.write(p[0])
            pr_dbg("send packet on radio")


def tun_listen(send_q):
    while running:
        buf = tun.read()
        rp = to_radio_packets(buf)
        send_q.put(rp)
        pr_dbg("read packet from tun device")
        

def handle_frames(recv_q):
    collected_packets = []
    while running:
        radio_packet = recv_q.get()
        collected_packets.append(radio_packet)
        if radio_packet == b'\x01\xBA\xBE':
            packet = from_radio_packets(collected_packets)
            if packet == bytes():
                pr_warn("tried to write empty packet to tun")
                continue
            tun.write(packet)
            collected_packets = []
            pr_dbg("write packet to tun")


if sys.argv[1] == 'base':
    pr_info("Starting node as base station...")
    is_base = True
elif sys.argv[1] == 'client':
    pr_info("Starting node as client...")
    is_base = False
else:
    pr_err("wrong arguments. Use 'base' or 'client")
    sys.exit(1)

try:
    tun = TunTap(nic_type='Tun', nic_name='MyG')
    if is_base:
        pr_info(f"Setup tun device:")
        pr_info(f"ip: {BASE_IP}")
        pr_info(f"mask: {MASK}")
        tun.config(ip=BASE_IP, mask=MASK)
    else:
        pr_info(f"Setup tun device:")
        pr_info(f"ip: {CLIENT_IP}")
        pr_info(f"mask: {MASK}")
        tun.config(ip=CLIENT_IP, mask=MASK)


    tx, rx = setup_radios()

    if is_base:
        rx_channel = 76
        tx_channel = 77
        rx_address = NODE1
        tx_address = NODE2
    else:
        rx_channel = 77
        tx_channel = 76
        rx_address = NODE2
        tx_address = NODE1

    rx.setChannel(rx_channel)
    tx.setChannel(tx_channel)

    pr_dbg(f"rx channel: {rx_channel}")
    pr_dbg(f"rx address: {rx_address}")

    pr_dbg(f"tx channel: {tx_channel}")
    pr_dbg(f"tx address: {tx_address}")
    
    rx.open_rx_pipe(0, rx_address[0])
    rx.listen = True

    tx.open_tx_pipe(tx_address[0])
    tx.listen = False

    #setup_tun(is_base)

    recv_q = mp.Queue()
    send_q = mp.Queue()

    tx_thread = mp.Process(target=send, args=(send_q,))
    rx_thread = mp.Process(target=recv, args=(recv_q,))
    tun_thread = mp.Process(target=tun_listen, args=(send_q,))
    frame_thread = mp.Process(target=handle_frames, args=(recv_q,))

    tx_thread.start()
    rx_thread.start()
    tun_thread.start()
    frame_thread.start()

    tx_thread.join()
    rx_thread.join()
    tun_thread.join()
    frame_thread.join()

except KeyboardInterrupt:
    running = False
    tun.close()
except Exception as e:
    running = False
    tun.close()
    print(e)
    sys.exit(1)
